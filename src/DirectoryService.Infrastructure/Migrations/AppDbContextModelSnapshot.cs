// <auto-generated />
using System;
using System.Collections.Generic;
using DirectoryService.Infrastructure.EfCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DirectoryService.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DirectoryService.Domain.Entities.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("Depth")
                        .HasColumnType("integer")
                        .HasColumnName("depth");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid")
                        .HasColumnName("parent_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.ComplexProperty<Dictionary<string, object>>("DepartmentName", "DirectoryService.Domain.Entities.Department.DepartmentName#DepartmentName", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(150)
                                .HasColumnType("character varying(150)")
                                .HasColumnName("name");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Identifier", "DirectoryService.Domain.Entities.Department.Identifier#Identifier", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(150)
                                .HasColumnType("character varying(150)")
                                .HasColumnName("identifier");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Path", "DirectoryService.Domain.Entities.Department.Path#DeparmentPath", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("path");
                        });

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("departments", null, t =>
                        {
                            t.HasCheckConstraint("CK_departments_identifier_format", "\"identifier\" ~ '^[A-Za-z-]+$'");

                            t.HasCheckConstraint("CK_departments_identifier_length", "char_length(\"identifier\") >= 3 AND char_length(\"identifier\") <= 150");

                            t.HasCheckConstraint("CK_departments_name_cyrillic", "\"name\" ~ '^[А-Яа-яЁё -]+$'");

                            t.HasCheckConstraint("CK_departments_name_length", "char_length(\"name\") >= 3 AND char_length(\"name\") <= 150");

                            t.HasCheckConstraint("CK_departments_path", "\"path\" ~ '^(?=.*[A-Za-z])[A-Za-z.-]+$'");
                        });
                });

            modelBuilder.Entity("DirectoryService.Domain.Entities.DepartmentLocation", b =>
                {
                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uuid")
                        .HasColumnName("department_id");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uuid")
                        .HasColumnName("location_id");

                    b.HasKey("DepartmentId", "LocationId");

                    b.HasIndex("LocationId");

                    b.ToTable("department_locations", (string)null);
                });

            modelBuilder.Entity("DirectoryService.Domain.Entities.DepartmentPosition", b =>
                {
                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uuid")
                        .HasColumnName("department_id");

                    b.Property<Guid>("PositionId")
                        .HasColumnType("uuid")
                        .HasColumnName("position_id");

                    b.HasKey("DepartmentId", "PositionId");

                    b.HasIndex("PositionId");

                    b.ToTable("department_positions", (string)null);
                });

            modelBuilder.Entity("DirectoryService.Domain.Entities.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.ComplexProperty<Dictionary<string, object>>("Address", "DirectoryService.Domain.Entities.Location.Address#Address", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Building")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("address_building");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("address_city");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("address_country");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("address_street");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("LocationName", "DirectoryService.Domain.Entities.Location.LocationName#LocationName", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(120)
                                .HasColumnType("character varying(120)")
                                .HasColumnName("name");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Timezone", "DirectoryService.Domain.Entities.Location.Timezone#Timezone", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("timezone");
                        });

                    b.HasKey("Id");

                    b.ToTable("locations", null, t =>
                        {
                            t.HasCheckConstraint("CK_locations_address_building", "\"address_building\" ~ '^[A-Za-zА-Яа-яЁё0-9 \\-]+$'");

                            t.HasCheckConstraint("CK_locations_address_city", "\"address_city\" ~ '^(?=.*[A-Za-zА-Яа-яЁё0-9])[A-Za-zА-Яа-яЁё0-9 .-]+$'");

                            t.HasCheckConstraint("CK_locations_address_country", "\"address_country\" ~ '^(?=.*[A-Za-zА-Яа-яЁё0-9])[A-Za-zА-Яа-яЁё0-9 .-]+$'");

                            t.HasCheckConstraint("CK_locations_address_street", "\"address_street\" ~ '^(?=.*[A-Za-zА-Яа-яЁё0-9])[A-Za-zА-Яа-яЁё0-9 .-]+$'");

                            t.HasCheckConstraint("CK_locations_name_format", "\"name\" ~ '^(?=.*[A-Za-zА-Яа-яЁё0-9])[A-Za-zА-Яа-яЁё0-9 .-]+$'");

                            t.HasCheckConstraint("CK_locations_name_length", "char_length(\"name\") >= 3 AND char_length(\"name\") <= 120");
                        });
                });

            modelBuilder.Entity("DirectoryService.Domain.Entities.Position", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("positions", null, t =>
                        {
                            t.HasCheckConstraint("CK_positions_description_length", "description IS NULL OR char_length(description) <= 1000");

                            t.HasCheckConstraint("CK_positions_name_format", "\"name\" ~ '^[A-Za-zА-Яа-яЁё\\s.-]+$'");

                            t.HasCheckConstraint("CK_positions_name_length", "char_length(\"name\") >= 3 AND char_length(\"name\") <= 100");
                        });
                });

            modelBuilder.Entity("DirectoryService.Domain.Entities.Department", b =>
                {
                    b.HasOne("DirectoryService.Domain.Entities.Department", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("DirectoryService.Domain.Entities.DepartmentLocation", b =>
                {
                    b.HasOne("DirectoryService.Domain.Entities.Department", "Department")
                        .WithMany("DepartmentLocations")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DirectoryService.Domain.Entities.Location", "Location")
                        .WithMany("DepartmentLocations")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("DirectoryService.Domain.Entities.DepartmentPosition", b =>
                {
                    b.HasOne("DirectoryService.Domain.Entities.Department", "Department")
                        .WithMany("DepartmentPositions")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DirectoryService.Domain.Entities.Position", "Position")
                        .WithMany("DepartmentPositions")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Position");
                });

            modelBuilder.Entity("DirectoryService.Domain.Entities.Department", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("DepartmentLocations");

                    b.Navigation("DepartmentPositions");
                });

            modelBuilder.Entity("DirectoryService.Domain.Entities.Location", b =>
                {
                    b.Navigation("DepartmentLocations");
                });

            modelBuilder.Entity("DirectoryService.Domain.Entities.Position", b =>
                {
                    b.Navigation("DepartmentPositions");
                });
#pragma warning restore 612, 618
        }
    }
}
